#pragma once

const int TICK_INFINTY = 0;

//---------------------------------------------------------------------//
class TaskNode
{
private:
	Work		*workObject_;
	int			freqSec_;
	int			durationSec_;

	tick_t		nextTick_;

public:
	TaskNode(Work *workObject, int freqSec, int durationSec);
	~TaskNode();

	/****************************************************************************
	함수명	: nextTick
	설명		: nextTick_을 다음 틱으로 변경해줌
	리턴값	: 없음
	매개변수	: 없음
	*****************************************************************************/
	void nextTick();

	/****************************************************************************
	함수명	: expired
	설명		: 해당 task가 만기 됬나 안됬나 확인
	리턴값	: bool
	매개변수	: 없음
	*****************************************************************************/
	bool expired();

	/****************************************************************************
	함수명	: tick
	설명		: tick마다 update되는 함수
	리턴값	: 없음
	매개변수	: 없음
	*****************************************************************************/
	void tick();
};

//---------------------------------------------------------------------//
class Task
{
private:
	std::list<TaskNode *> taskList_;
	Thread		*thread_;
	int			id_;

public:
	Task(int id);
	~Task();

	/****************************************************************************
	함수명	: add
	설명		: taskNode를 리스트에 넣어줌
	리턴값	: 없음
	매개변수	: TaskNode*
	*****************************************************************************/
	void add(TaskNode *taskNode);

	/****************************************************************************
	함수명	: remove
	설명		: taskNode를 리스트에서 제거함
	리턴값	: 없음
	매개변수	: TaskNode*
	*****************************************************************************/
	void remove(TaskNode *taskNode);

	/****************************************************************************
	함수명	: process
	설명		: 리스트에서 끝난 taskNode들 제거 및 갱신
	리턴값	: 없음
	매개변수	: 없음
	*****************************************************************************/
	void process();

	/****************************************************************************
	함수명	: run
	설명		: process를 돌려주는 스레드 생성
	리턴값	: 없음
	매개변수	: 없음
	*****************************************************************************/
	void run();
};

//---------------------------------------------------------------------//
class TaskManager : public Singleton <TaskManager>
{
	friend Singleton;
private:
	int                     threadCount_;
	std::vector<Task *>     taskPool_;

	TaskManager();
	~TaskManager();

public:
	//config파일로 threadCount_만큼 Task생성
	void initialize(xml_t *config);
	void release();

	/****************************************************************************
	함수명	: add
	설명		: workObject를 taskPool_에 추가해줌
	리턴값	: 없음
	매개변수	: Work*, int, int
	*****************************************************************************/
	void add(Work *workObject, int freqSec, int durationSec);
};
